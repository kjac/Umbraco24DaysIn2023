using Umbraco.Cms.Core;
using Umbraco.Cms.Core.DeliveryApi;
using Umbraco.Cms.Core.Models;

namespace RazorBlog.Filters;

// see https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/extension-api-for-querying#custom-filter

internal static class AuthorFilterConstants
{
    internal const string FilterSpecifier = "author:";

    internal const string FieldName = "authorId";
}

internal class AuthorContentIndexHandler : IContentIndexHandler
{
    // returns the search index field(s) that are (potentially) generated by this index handler
    public IEnumerable<IndexField> GetFields() => new[]
    {
        new IndexField
        {
            FieldName = AuthorFilterConstants.FieldName,
            FieldType = FieldType.StringRaw,
            VariesByCulture = false
        }
    };

    // extracts the relevant search index field values (if any) for a content item
    public IEnumerable<IndexFieldValue> GetFieldValues(IContent content, string? culture)
    {
        // we'll assume only posts have an "author" property
        var authorUdi = content.GetValue<GuidUdi>("author");
        if (authorUdi is null)
        {
            // no author property on this content - it's probably not a post then
            return Array.Empty<IndexFieldValue>();
        }

        return new[]
        {
            new IndexFieldValue
            {
                FieldName = AuthorFilterConstants.FieldName,
                Values = new object[] { authorUdi.Guid }
            }
        };
    }
}

internal class AuthorFilterHandler : IFilterHandler
{
    // whether or not this filter can handle a "filter" query part
    public bool CanHandle(string query)
        => query.StartsWith(AuthorFilterConstants.FilterSpecifier, StringComparison.OrdinalIgnoreCase);

    // builds the filter option for the "filter" query part
    public FilterOption BuildFilterOption(string filter)
    {
        var fieldValue = filter[AuthorFilterConstants.FilterSpecifier.Length..];

        // there might be several values for the filter
        var values = fieldValue.Split(',');

        return new FilterOption
        {
            FieldName = AuthorFilterConstants.FieldName,
            Values = values,
            Operator = FilterOperation.Is
        };
    }
}
